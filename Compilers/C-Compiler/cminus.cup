/*
    cminus.cup
    Not sure what this file does yet

    To Build: java java_cup.Main < cminus.cup

    Authors: Jessica Authier and Tyler Green
    Last Modified: 03/16/2019
*/

/* ----------------------Preliminary Declarations Section--------------------*/

/* Import the class java_cup.runtime.*  */
//import java_cup.runtime.*;
import absyn.*;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

  public static boolean errors = false;

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
        this.errors = true;

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }

        } else if (info instanceof Absyn) {
          Absyn s = ((Absyn)info);
          if (s.row >= 0) {
              /* Add to the end of the StringBuffer error message
                 the line number of the error in the input. */
              m.append(" in line "+(s.row+1));
              /* Check if the column number in the input is greater
                 or equal to zero. */
              if (s.col >= 0)
                  /* Add to the end of the StringBuffer error message
                     the column number of the error in the input. */
                  m.append(", column "+(s.col+1));
          }
        }

        m.append(": "+message);
        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

:};


/* ------------Declaration of Terminals and Non Terminals Section----------- */

terminal IF, ELSE, INT, VOID, RETURN, WHILE;
terminal ASSIGN, EQ, NEQ, LT, GT, LEQ, GEQ, PLUS, MINUS, TIMES, OVER;
terminal LPAREN, RPAREN, LBRACKET, RBRACKET, LBRACE, RBRACE, SEMI, COMMA;
terminal String ID, NUM; // specify a type
terminal ERROR;

/* non terminal Exp program1; */
non terminal DecList program, declaration_list, param_list, params, local_declarations;
non terminal ExpList statement_list, args, args_list;
non terminal Dec  declaration, var_declaration, fun_declaration, param;
/* non terminal Integer comparison_op; */
non terminal VarExp var;
non terminal CompoundExp compound_stmt;
non terminal Exp statement, expression_stmt, selection_stmt, iteration_stmt, return_stmt;
non terminal Exp exp, call;
non terminal TypeSpec type_specifier;
non terminal Exp simple_var, index_var;


/* ----------------------------Grammar Section-------------------- */

precedence nonassoc ASSIGN;
precedence nonassoc EQ, NEQ, LT, GT, LEQ, GEQ;
precedence left PLUS, MINUS;
precedence left TIMES, OVER;
precedence left ELSE;

start with program;

program ::= declaration_list:d
  {: RESULT = d; :}
;

declaration_list ::=
    declaration_list:decs declaration:dec
    {: DecList d = decs;
      while (d.tail !=null)
        d = d.tail;
      d.tail = new DecList(dec, null);
      RESULT = decs;
      :}
  | declaration:dec
    {: RESULT = new DecList(dec, null); :}
;

declaration ::=
    var_declaration:v
    {: RESULT = v; :}
  | fun_declaration:f
    {: RESULT = f; :}
;

var_declaration ::=
    type_specifier:t ID:i SEMI
    {: if (t.type == Dec.VOID){
      parser.report_error("Invalid variable declaration: void is not a valid type",t);
    } else {
      RESULT = new SimpleDec(tleft, tright, i, t);
    } :}
  | type_specifier:t ID:i LBRACKET NUM:n RBRACKET SEMI
    {: if (t.type == Dec.VOID){
      parser.report_error("Invalid variable declaration: void is not a valid type",t);
    } else {
      RESULT = new ArrayDec(tleft, tright, i, Integer.parseInt(n), t);
    } :} // may need to change this for allowing no n
;

type_specifier ::=
    INT:i
    {: RESULT = new TypeSpec(ileft, iright,  Dec.INT); :}
  | VOID:v
    {: RESULT = new TypeSpec(vleft, vright,  Dec.VOID); :}
;

fun_declaration ::=
    type_specifier:t ID:i LPAREN params:p RPAREN compound_stmt:s
    {: RESULT = new FunctionDec(tleft, tright, i, t, p, s); :}
  /* | type_specifier:t ID:i LPAREN params:p RPAREN
    {: RESULT = new FunctionDec(tleft, tright, i, t, p, null); :} */
  | type_specifier:t ID:i LPAREN error:err RPAREN
    {: parser.report_error("Invaild Function Declaration", err); :}
;

params ::=
    param_list:p
    {: RESULT = p; :}
  | VOID
    {: RESULT = null; :}
;

param_list ::=
    param_list:l COMMA param:p
    {: DecList d = l;
      while (d.tail != null)
        d = d.tail;
      d.tail = new DecList(p, null);
      RESULT = l;
      :}
  | param:p
    {: RESULT = new DecList(p, null); :}
;

param ::=
    type_specifier:t ID:i
    {: RESULT = new SimpleDec(tleft, tright, i, t); :}
  | type_specifier:t ID:i LBRACKET RBRACKET
    {: RESULT = new ArrayDec(tleft, tright, i, 0, t); :}
;

compound_stmt ::=
    LBRACE:i local_declarations:d statement_list:s RBRACE
    {: RESULT = new CompoundExp(ileft, iright, d, s); :}
  | LBRACE:i local_declarations:d RBRACE
  {: RESULT = new CompoundExp(ileft, iright, d, null); :}
;

local_declarations ::=
    local_declarations:decs var_declaration:dec
    {:
      if (decs == null){
        RESULT = new DecList(dec, null);
      } else {
        DecList d = decs;
        while (d.tail !=null)
          d = d.tail;
        d.tail = new DecList(dec, null);
        RESULT = decs;
      } :}
  |
;

statement_list ::=
    statement_list:s1 statement:s2
    {: ExpList t = s1;
       while( t.tail != null )
         t = t.tail;
       t.tail = new ExpList(s2, null);
       RESULT = s1;
    :}
  | statement:s
    {: RESULT = new ExpList(s, null); :}
;

statement ::=
    expression_stmt:e
    {: RESULT = e; :}
  | compound_stmt:e
    {: RESULT = e; :}
  | selection_stmt:e
    {: RESULT = e; :}
  | iteration_stmt:e
    {: RESULT = e; :}
  | return_stmt:e
    {: RESULT = e; :}
;

expression_stmt ::=
    exp:e SEMI
    {: RESULT = e; :}
  | SEMI
  | error:e SEMI
    {: parser.report_error("Invalid Statement", e); :}
;

selection_stmt ::=
    IF:i LPAREN exp:e RPAREN statement:s
    {: RESULT = new IfExp(ileft, iright, e, s, new NillExp(ileft, iright)); :}
  | IF:i LPAREN exp:e RPAREN statement:s1 ELSE statement:s2
    {: RESULT = new IfExp(ileft, iright, e, s1, s2); :}
  | IF:i LPAREN error:e RPAREN statement:s
    {: parser.report_error("Invalid comparison", e); :}
;

iteration_stmt ::=
    WHILE:w LPAREN exp:e RPAREN statement:s
    {: RESULT = new WhileExp(wleft, wright, e, s); :}
  | WHILE:w LPAREN error:e RPAREN statement:s
    {: parser.report_error("Invalid comparison", e); :}
;

return_stmt ::=
    RETURN:r exp:e SEMI
    {: RESULT = new ReturnExp(rleft, rright, e); :}
  | RETURN:r SEMI
    {: RESULT = new ReturnExp(rleft, rright, new NillExp(rleft, rright)); :}
;

var ::=
    simple_var:v
    {: RESULT = new VarExp(vleft, vright, v); :}
  | index_var:v
    {: RESULT = new VarExp(vleft, vright, v); :}
;

simple_var ::=
    ID:i
    {: RESULT = new SimpleVarExp(ileft, iright,i); :}
;

index_var ::=
    ID:i LBRACKET exp:e RBRACKET
    {: RESULT = new IndexVarExp(ileft, iright, i, e); :}
;

exp ::=
    var:v ASSIGN exp:e
    {: RESULT = new AssignExp(eleft, eright, v, e); :}
  | exp:e1 PLUS exp:e2
    {: RESULT = new OpExp(e1left, e1right, e1, OpExp.PLUS, e2); :}
  | exp:e1 MINUS exp:e2
    {: RESULT = new OpExp(e1left, e1right, e1, OpExp.MINUS, e2); :}
  | exp:e1 TIMES exp:e2
    {: RESULT = new OpExp(e1left, e1right, e1, OpExp.TIMES, e2); :}
  | exp:e1 OVER exp:e2
    {: RESULT = new OpExp(e1left, e1right, e1, OpExp.OVER, e2); :}
  | exp:e1 LT exp:e2
    {: RESULT = new OpExp(e1left, e1right, e1, OpExp.LT, e2); :}
  | exp:e1 GT exp:e2
    {: RESULT = new OpExp(e1left, e1right, e1, OpExp.GT, e2); :}
  | exp:e1 LEQ exp:e2
    {: RESULT = new OpExp(e1left, e1right, e1, OpExp.LEQ, e2); :}
  | exp:e1 GEQ exp:e2
    {: RESULT = new OpExp(e1left, e1right, e1, OpExp.GEQ, e2); :}
  | exp:e1 EQ exp:e2
    {: RESULT = new OpExp(e1left, e1right, e1, OpExp.EQ, e2); :}
  | exp:e1 NEQ exp:e2
    {: RESULT = new OpExp(e1left, e1right, e1, OpExp.NEQ, e2); :}
  | LPAREN exp:e RPAREN
    {: RESULT = e; :}
  | var:v
    {: RESULT = v; :}
  | call:c
    {: RESULT = c; :}
  | NUM:n
    {: RESULT = new IntExp(nleft, nright, n); :}
  | LPAREN error:e RPAREN
    {: parser.report_error("Invalid Expression",e); :}
;

call ::=
    ID:i LPAREN args:a RPAREN
    {: RESULT = new CallExp(ileft, iright, i, a); :}
  | ID:i LPAREN error:e RPAREN
    {: parser.report_error("Invalid Call Expression",e); :}
;

args ::=
    args_list:a
    {: RESULT = a; :}
  |
    {: RESULT = null; :}
;

args_list ::=
    args_list:a COMMA exp:e
    {: ExpList t = a;
       while( t.tail != null )
         t = t.tail;
       t.tail = new ExpList(e, null);
       RESULT = a; :}
  | exp:e
    {: RESULT = new ExpList(e, null); :}
;
